
This is the generated documentation for the source code. Please review it and improve the documentation quality.
Note: Do not change the structure of the documentation. Do not change values in the input/output examples.
After you are done with all checks of quality and accuracy, please remove the source code block.

Context: 
# user.py

## Source Code
```python
# user.py
import uuid

"""
Contains the User class which uses the uuid library to generate unique user IDs.
"""
class User:
    def __init__(self, name, email):
        self.id = uuid.uuid4()
        self.name = name
        self.email = email
    
    def __str__(self):
        return f"User [ID: {self.id}, Name: {self.name}, Email: {self.email}]"
    
    def update_email(self, new_email):
        self.email = new_email
```

## ClassDef User

The function of the class is to represent a user with a unique ID, name, and email address.

**Attributes**:

- `id` (`UUID`): A unique identifier for the user, generated using the uuid library.
- `name` (`str`): The name of the user.
- `email` (`str`): The email address of the user.

**Functions**:

- `__init__`(self, `name`: `str`, `email`: `str`) -> `None`
    - Parameters:
        - `name` (`str`): The name of the user.
        - `email` (`str`): The email address of the user.
    - Returns:
        - `None`: This method initializes a new User instance.

- `__str__`(self) -> `str`
    - Returns:
        - `str`: A string representation of the User instance, including the ID, name, and email.

- `update_email`(self, `new_email`: `str`) -> `None`
    - Parameters:
        - `new_email` (`str`): The new email address for the user.
    - Returns:
        - `None`: This method updates the email address of the user instance.

**Code Description**: The `User` class uses the `uuid` library to generate a unique identifier for each user instance upon creation. It includes methods for initializing a new user with a name and email, updating the user's email, and representing the user instance as a string.

**Note**: When using the `update_email` method, ensure the new email address is valid as this method does not perform any validation.

**Input Example**: 

```
user = User("John Doe", "john.doe@example.com")
```
This example creates a new user instance with the name "John Doe" and the email "john.doe@example.com".

**Output Example**:

```
User [ID: 123e4567-e89b-12d3-a456-426614174000, Name: John Doe, Email: john.doe@example.com]
```
This output example shows the string representation of a user instance, including a unique ID, name, and email address.